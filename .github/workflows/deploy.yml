name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on changes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment for testing
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Specify the Python version you need

      # Step 3: Install dependencies for testing
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests (You can replace this with your actual test command)
      - name: Run tests
        run: |
          # Here, replace with your actual test command
          python -m unittest discover  # Example: running unit tests

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build and push Docker image to Docker Hub
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-app:latest

      # Step 7: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 8: Deploy to EC2 instance
      - name: Deploy to EC2
        run: |
          # Set the EC2 instance details
          EC2_INSTANCE_IP='3.108.65.214'  # Replace with your EC2 instance public IP
          SSH_USER='ubuntu'  # Replace with your EC2 SSH username
          
          # Command to connect to the EC2 instance and run Docker commands
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY }} $SSH_USER@$EC2_INSTANCE_IP << 'EOF'
            # Pull the latest image
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
            
            # Stop and remove the currently running container if it exists
            if [ "$(docker ps -q -f name=flask-app)" ]; then
              docker stop flask-app
              docker rm flask-app
            fi
            
            # Run the new container
            docker run -d --name flask-app -p 80:80 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          EOF
